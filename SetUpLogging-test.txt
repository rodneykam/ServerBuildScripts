There are two parts to the logging process. 
Set up the calling script and the child script.

1. Set up the calling script to create a log file with the correct name and path.

    Setup logging on the Calling script.
    
    Step A.  Import the Module file.
        Import-Module -Name .\FunctionWriteLog.ps1 # or whatever "Function file" Write-Log Function resides in.
    
    Step B. Name the logfile with the server name and date
            
            get name of the script that is running
                $ScriptName = $MyInvocation.MyCommand.Name # gets name of the script that is running
        
            Get the date and time stamp
                $filedate =(Get-Date).ToString("yyyyMMddhhmmss")
            
            Set the path to the log file
                $LogPath = "E:\Buldout\Logs\"
        
            Name the log file with the server name and time stamp.
                $LogFile = "$($env:computername)_" + $filedate + ".log" 
            
            Combine the path and name to pass to the Write-Log function. This is where the Write-log function will write.
                $BuildOutLog = "$LogPath" + "$LogFile"
    
    Step C. Start the log with a Header that includes the running script name and any othe information 
            The Write-Log function needs the Log name and path which is contained in the -Path parameter
            The format is Write-Log -Message "Your Information" -Path "Path and File name of the log file" 
        
        Here are some samples:
        
        Write-Log -Message "$ScriptName Log Starts" -Path $BuildOutLog      # First line of the log file
        Write-Log -Message " " -Path $BuildOutLog                           # Inserts blank line 

        Write-Log -Message "$ScriptName Information 1" -Path $BuildOutLog   # Write something to the log file.
    
    Step E. Write out any errors and exit the script
        Call the LogError function and pass the Path and File name of the log file
        
        Here is a samplez:
        
        If ($Error) { LogError $BuildOutLog }
    
    
    
2. Add the logging parts to the child scripts
        
        Step A. Add the Parameter BuildOutLog to the Param list. This tells the script where the log file is.
        
            Here is a sample:
            
            param
            (
            [Parameter(Mandatory=$true)] $Config,
            [Parameter(Mandatory=$true)] $MachineConfig,
            [Parameter(Mandatory=$true)] $BuildOutLog,
            [switch]$noDatabase
            )
        
        Step B. Capture the running scripts name
               
               Like this:
               $ScriptName = $MyInvocation.MyCommand.Name
        
        Step C. Add the Scripts name to the log file.         
               
               Like this:
               Write-Log -Message "$ScriptName Log Starts" -Path $BuildOutLog   # Changed from $Path
               
        Step D: Add the error handleing where approprite

        If ($Error) { LogError $BuildOutLog }

Here is a full sample for the calling script.
#Setup logging

    Import-Module -Name .\FunctionWriteLog.ps1 # or whatever "Function file" Write-Log Function resides in.

    $ScriptName = $MyInvocation.MyCommand.Name # gets name of the script that is running
    $filedate =(Get-Date).ToString("yyyyMMddhhmmss")
    $LogPath = "E:\Buldout\Logs\" #Sets the path to the log file.
    $LogFile = "$($env:computername)_" + $filedate + ".log" # creates log file Name on the server"
    $BuildOutLog = "$LogPath" + "$LogFile" # This is where the Write-log function will write to.
    Write-Log -Message "$ScriptName Log Starts" -Path $BuildOutLog   # First line of the log file
    Write-Log -Message " " -Path $BuildOutLog # Inserts blank line 

####

# Your main script goes here with Writ-Log where approprite. There are three type of errors avaiable.
# Info is the default
# warn will write the word Warning in the log and write the warning in Yellow out to the console
# Writes the message to the specified log file as an error message, and writes the message to the error pipeline.
# Use Warn if you don't want the Red error message on the screen
    
    Write-Log -Message "$ScriptName Information" -Path $BuildOutLog
    Write-Log -Message "$ScriptName Warning" -Path $BuildOutLog Warn
    Write-Log -Message "$ScriptName Error" -Path $BuildOutLog Error

####

    If ($Error) { LogError $BuildOutLog }
    Write-Log -Message "$ScriptName complete" -Path $BuildOutLog        
    Write-Log -Message " " -Path $BuildOutLog                       #Blank line to seperate script blocks in thelog



## Sample child script to show how to write to the BuildOutLog.

param
(
[Parameter(Mandatory=$true)] $Config,
[Parameter(Mandatory=$true)] $MachineConfig,
[Parameter(Mandatory=$true)] $BuildOutLog,
[switch]$noDatabase
)

    $ScriptName = $MyInvocation.MyCommand.Name
    Write-Log -Message "$ScriptName Log Starts" -Path $BuildOutLog   # Changed from $Path

# Clear the Error variable for this run.   
    $Error.Clear()

    $isAdmin = $null
    GetAdmin([ref]$isAdmin)
    $Error.clear()

    Write-Log -Message "$ScriptName Information" -Path $BuildOutLog
    Write-Log -Message "$ScriptName Warning" -Path $BuildOutLog Warn
    Write-Log -Message "$ScriptName Error" -Path $BuildOutLog Error

    If ($Error) 
    { 
        LogError $BuildOutLog 
    }
            
    Write-Log -Message "$ScriptName complete" -Path $BuildOutLog        
    Write-Log -Message " " -Path $BuildOutLog

#################################################################################

 3. Also add a function to log any errors.
 
 #  Here is a Function to Parse an error and log it. It also stops the script.
 #  add it to your Function file
 #  Sample use: If ($Error) { LogError $BuildOutLog }
 
Function LogError ($BuildOutLog) 
{
    $E1 = $E2 = $E3 = $E4 = $E5 = " "   #Sets variables to null.
    $E1 = [string]$Error.Exception      #Catches error
    $E2 = $E1.Split(":")	            # divides the string at the :
    $E3 = $E2[1]			            # Selects the part of the string after the :
    $E4 = $E3.Split("\.")	            # divides the result at the period
    $E5 = $E4[0]			            # selects the first part of of the string 
    
    Write-Log -Message "$ScriptName $E5" -Path $BuildOutLog Warn # writes the result to the log
    break					                                     # exits the script
}

	
	