<DataAdapter DataAdapterTypeID="DA-BlackBoxDotNet">
  <EntityType EntityTypeDisplayName=".NET CLR Data" EntityTypeID="NET CLR Data" MultipleInstance="true">
    <EntityType EntityTypeDisplayName=".NET CLR Data Instance" EntityTypeID="NET CLR Data Instance" MultipleInstance="true">
      <MetricType MetricTypeID="SqlClient Current Number connection pools" DataType="Value" DataUnit="Units" MetricTypeDisplayName="SqlClient: Current # connection pools">
        <MetricTypeDescription>Current number of pools associated with the process.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="SqlClient Current Number pooled and nonpooled connections" DataType="Value" DataUnit="Units" MetricTypeDisplayName="SqlClient: Current # pooled and nonpooled connections">
        <MetricTypeDescription>Current number of connections, pooled or not.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="SqlClient Current Number pooled connections" DataType="Value" DataUnit="Units" MetricTypeDisplayName="SqlClient: Current # pooled connections">
        <MetricTypeDescription>Current number of connections in all pools associated with the process.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="SqlClient Peak Number pooled connections" DataType="Value" DataUnit="Units" MetricTypeDisplayName="SqlClient: Peak # pooled connections">
        <MetricTypeDescription>The highest number of connections in all pools since the process started.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="SqlClient Total Number failed commands" DataType="Value" DataUnit="Units" MetricTypeDisplayName="SqlClient: Total # failed commands">
        <MetricTypeDescription>The total number of command executes that have failed for any reason.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="SqlClient Total Number failed connects" DataType="Value" DataUnit="Units" MetricTypeDisplayName="SqlClient: Total # failed connects">
        <MetricTypeDescription>The total number of connection open attempts that have failed for any reason.</MetricTypeDescription>
      </MetricType>
    </EntityType>
  </EntityType>
  <EntityType EntityTypeDisplayName=".NET CLR Exceptions" EntityTypeID="NET CLR Exceptions" MultipleInstance="true">
    <EntityType EntityTypeDisplayName=".NET CLR Exceptions Instance" EntityTypeID="NET CLR Exceptions Instance" MultipleInstance="true">
      <MetricType MetricTypeID="Number of Exceps Thrown Per sec" DataType="Value" DataUnit="Units" MetricTypeDisplayName="# of Exceps Thrown / sec">
        <MetricTypeDescription>This counter displays the number of exceptions thrown per second. These include both .NET exceptions and unmanaged exceptions that get converted into .NET exceptions e.g. null pointer reference exception in unmanaged code would get re-thrown in managed code as a .NET System.NullReferenceException; this counter includes both handled and unhandled exceptions. Exceptions should only occur in rare situations and not in the normal control flow of the program; this counter was designed as an indicator of potential performance problems due to large (&gt;100s) rate of exceptions thrown. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.</MetricTypeDescription>
      </MetricType>
    </EntityType>
  </EntityType>
  <EntityType EntityTypeDisplayName=".NET CLR Interop" EntityTypeID="NET CLR Interop" MultipleInstance="true">
    <EntityType EntityTypeDisplayName=".NET CLR Interop Instance" EntityTypeID="NET CLR Interop Instance" MultipleInstance="true">
      <MetricType MetricTypeID="Number of marshalling" DataType="Value" DataUnit="Units" MetricTypeDisplayName="# of marshalling">
        <MetricTypeDescription>This counter displays the total number of times arguments and return values have been marshaled from managed to unmanaged code and vice versa since the start of the application. This counter is not incremented if the stubs are inlined. (Stubs are responsible for marshalling arguments and return values). Stubs usually get inlined if the marshalling overhead is small.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Number of Stubs" DataType="Value" DataUnit="Units" MetricTypeDisplayName="# of Stubs">
        <MetricTypeDescription>This counter displays the current number of stubs created by the CLR. Stubs are responsible for marshalling arguments and return values from managed to unmanaged code and vice versa; during a COM Interop call or PInvoke call.</MetricTypeDescription>
      </MetricType>
    </EntityType>
  </EntityType>
  <EntityType EntityTypeDisplayName=".NET CLR Loading" EntityTypeID="NET CLR Loading" MultipleInstance="true">
    <EntityType EntityTypeDisplayName=".NET CLR Loading Instance" EntityTypeID="NET CLR Loading Instance" MultipleInstance="true">
      <MetricType MetricTypeID="Bytes in Loader Heap" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Bytes in Loader Heap">
        <MetricTypeDescription>This counter displays the current size (in bytes) of the memory committed by the class loader across all AppDomains. (Committed memory is the physical memory for which space has been reserved on the disk paging file.)</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Current appdomains" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Current appdomains">
        <MetricTypeDescription>This counter displays the current number of AppDomains loaded in this application. AppDomains (application domains) provide a secure and versatile unit of processing that the CLR can use to provide isolation between applications running in the same process.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Current Assemblies" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Current Assemblies">
        <MetricTypeDescription>This counter displays the current number of Assemblies loaded across all AppDomains in this application. If the Assembly is loaded as domain-neutral from multiple AppDomains then this counter is incremented once only. Assemblies can be loaded as domain-neutral when their code can be shared by all AppDomains or they can be loaded as domain-specific when their code is private to the AppDomain.</MetricTypeDescription>
      </MetricType>
    </EntityType>
  </EntityType>
  <EntityType EntityTypeDisplayName=".NET CLR LocksAndThreads" EntityTypeID="NET CLR LocksAndThreads" MultipleInstance="true">
    <EntityType EntityTypeDisplayName=".NET CLR LocksAndThreads Instance" EntityTypeID="NET CLR LocksAndThreads Instance" MultipleInstance="true">
      <MetricType MetricTypeID="Number of current physical Threads" DataType="Value" DataUnit="Units" MetricTypeDisplayName="# of current physical Threads">
        <MetricTypeDescription>This counter displays the number of native OS threads created and owned by the CLR to act as underlying threads for .NET thread objects. This counters value does not include the threads used by the CLR in its internal operations; it is a subset of the threads in the OS process.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Contention Rate Per sec" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Contention Rate / sec">
        <MetricTypeDescription>Rate at which threads in the runtime attempt to acquire a managed lock unsuccessfully. Managed locks can be acquired in many ways; by the "lock" statement in C# or by calling System.Monitor.Enter or by using MethodImplOptions.Synchronized custom attribute.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Current Queue Length" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Current Queue Length">
        <MetricTypeDescription>This counter displays the total number of threads currently waiting to acquire some managed lock in the application. This counter is not an average over time; it displays the last observed value.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Queue Length Per sec" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Queue Length / sec">
        <MetricTypeDescription>This counter displays the number of threads per second waiting to acquire some lock in the application. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.</MetricTypeDescription>
      </MetricType>
    </EntityType>
  </EntityType>
  <EntityType EntityTypeDisplayName=".NET CLR Memory" EntityTypeID="NET CLR Memory" MultipleInstance="true">
    <EntityType EntityTypeDisplayName=".NET CLR Memory Instance" EntityTypeID="NET CLR Memory Instance" MultipleInstance="true">
      <MetricType MetricTypeID="Number Bytes in all Heaps" DataType="Value" DataUnit="Units" MetricTypeDisplayName="# Bytes in all Heaps">
        <MetricTypeDescription>This counter is the sum of four other counters; Gen 0 Heap Size; Gen 1 Heap Size; Gen 2 Heap Size and the Large Object Heap Size. This counter indicates the current memory allocated in bytes on the GC Heaps.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Number Gen 0 Collections" DataType="Value" DataUnit="Units" MetricTypeDisplayName="# Gen 0 Collections">
        <MetricTypeDescription>This counter displays the number of times the generation 0 objects (youngest; most recently allocated) are garbage collected (Gen 0 GC) since the start of the application. Gen 0 GC occurs when the available memory in generation 0 is not sufficient to satisfy an allocation request. This counter is incremented at the end of a Gen 0 GC. Higher generation GCs include all lower generation GCs. This counter is explicitly incremented when a higher generation (Gen 1 or Gen 2) GC occurs. _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Number Gen 1 Collections" DataType="Value" DataUnit="Units" MetricTypeDisplayName="# Gen 1 Collections">
        <MetricTypeDescription>This counter displays the number of times the generation 1 objects are garbage collected since the start of the application. The counter is incremented at the end of a Gen 1 GC. Higher generation GCs include all lower generation GCs. This counter is explicitly incremented when a higher generation (Gen 2) GC occurs. _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Number Gen 2 Collections" DataType="Value" DataUnit="Units" MetricTypeDisplayName="# Gen 2 Collections">
        <MetricTypeDescription>This counter displays the number of times the generation 2 objects (older) are garbage collected since the start of the application. The counter is incremented at the end of a Gen 2 GC (also called full GC). _Global_ counter value is not accurate and should be ignored. This counter displays the last observed value.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Number of Pinned Objects" DataType="Value" DataUnit="Units" MetricTypeDisplayName="# of Pinned Objects">
        <MetricTypeDescription>This counter displays the number of pinned objects encountered in the last GC. This counter tracks the pinned objects only in the heaps that were garbage collected e.g. a Gen 0 GC would cause enumeration of pinned objects in the generation 0 heap only. A pinned object is one that the Garbage Collector cannot move in memory.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Percent Time in GC" DataType="Value" DataUnit="Units" MetricTypeDisplayName="% Time in GC">
        <MetricTypeDescription>% Time in GC is the percentage of elapsed time that was spent in performing a garbage collection (GC) since the last GC cycle. This counter is usually an indicator of the work done by the Garbage Collector on behalf of the application to collect and compact memory. This counter is updated only at the end of every GC and the counter value reflects the last observed value; its not an average.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Finalization Survivors" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Finalization Survivors">
        <MetricTypeDescription>This counter displays the number of garbage collected objects that survive a collection because they are waiting to be finalized. If these objects hold references to other objects then those objects also survive but are not counted by this counter; the "Promoted Finalization-Memory from Gen 0" and "Promoted Finalization-Memory from Gen 1" counters represent all the memory that survived due to finalization. This counter is not a cumulative counter; its updated at the end of every GC with count of the survivors during that particular GC only. This counter was designed to indicate the extra overhead that the application might incur because of finalization.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Large Object Heap size" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Large Object Heap size">
        <MetricTypeDescription>This counter displays the current size of the Large Object Heap in bytes. Objects greater than 20 KBytes are treated as large objects by the Garbage Collector and are directly allocated in a special heap; they are not promoted through the generations. This counter is updated at the end of a GC; its not updated on every allocation.</MetricTypeDescription>
      </MetricType>
    </EntityType>
  </EntityType>
  <EntityType EntityTypeDisplayName=".NET CLR Remoting" EntityTypeID="NET CLR Remoting" MultipleInstance="true">
    <EntityType EntityTypeDisplayName=".NET CLR Remoting Instance" EntityTypeID="NET CLR Remoting Instance" MultipleInstance="true">
      <MetricType MetricTypeID="Remote Calls Per sec" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Remote Calls/sec">
        <MetricTypeDescription>This counter displays the number of remote procedure calls invoked per second. A remote procedure call is a call on any object outside the caller;s AppDomain. This counter is not an average over time; it displays the difference between the values observed in the last two samples divided by the duration of the sample interval.</MetricTypeDescription>
      </MetricType>
    </EntityType>
  </EntityType>
  <EntityType EntityTypeDisplayName=".NET CLR Security" EntityTypeID="NET CLR Security" MultipleInstance="true">
    <EntityType EntityTypeDisplayName=".NET CLR Security Instance" EntityTypeID="NET CLR Security Instance" MultipleInstance="true">
      <MetricType MetricTypeID="Stack Walk Depth" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Stack Walk Depth">
        <MetricTypeDescription>This counter displays the depth of the stack during that last runtime Code Access Security check. Runtime Code Access Security check is performed by crawling the stack. This counter is not an average; it just displays the last observed value.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Total Runtime Checks" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Total Runtime Checks">
        <MetricTypeDescription>This counter displays the total number of runtime Code Access Security (CAS) checks performed since the start of the application. Runtime CAS checks are performed when a caller makes a call to a callee demanding a particular permission; the runtime check is made on every call by the caller; the check is done by examining the current thread stack of the caller. This counter used together with "Stack Walk Depth" is indicative of performance penalty for security checks.</MetricTypeDescription>
      </MetricType>
    </EntityType>
  </EntityType>
  <EntityType EntityTypeDisplayName="ASP.NET" EntityTypeID="ASP NET" MultipleInstance="true">
    <EntityType EntityTypeDisplayName="ASP.NET Instance" EntityTypeID="ASP NET Instance" MultipleInstance="true">
      <MetricType MetricTypeID="Request Execution Time" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Request Execution Time">
        <MetricTypeDescription>The number of milliseconds that it took to execute the most recent request.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Request Wait Time" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Request Wait Time">
        <MetricTypeDescription>The number of milliseconds the most recent request was waiting in the queue.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Requests Current" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Requests Current">
        <MetricTypeDescription>The current number of requests, including those that are queued, currently executing, or waiting to be written to the client.  Under the ASP.NET process model, when this counter exceeds the requestQueueLimit defined in the processModel configuration section, ASP.NET will begin rejecting requests.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Requests Queued" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Requests Queued">
        <MetricTypeDescription>The number of requests waiting to be processed.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Requests Rejected" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Requests Rejected">
        <MetricTypeDescription>The number of requests rejected because the request queue was full.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Worker Process Restarts" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Worker Process Restarts">
        <MetricTypeDescription>Number of times a worker process has restarted on the machine.</MetricTypeDescription>
      </MetricType>
    </EntityType>
  </EntityType>
  <EntityType EntityTypeDisplayName="ASP.NET Applications" EntityTypeID="ASP NET Applications" MultipleInstance="true">
    <EntityType EntityTypeDisplayName="ASP.NET Applications Instance" EntityTypeID="ASP NET Applications Instance" MultipleInstance="true">
      <MetricType MetricTypeID="Cache API Hit Ratio" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Cache API Hit Ratio">
        <MetricTypeDescription>Ratio of hits called from user code.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Cache API Turnover Rate" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Cache API Turnover Rate">
        <MetricTypeDescription>Number of additions and removals to the API cache per second.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Cache Total Entries" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Cache Total Entries">
        <MetricTypeDescription>Total number of entries within the cache (both internal and user added)</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Cache Total Hit Ratio" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Cache Total Hit Ratio">
        <MetricTypeDescription>Ratio of hits from all cache calls.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Cache Total Turnover Rate" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Cache Total Turnover Rate">
        <MetricTypeDescription>Number of additions and removals to the total cache per second.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Errors During Execution" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Errors During Execution">
        <MetricTypeDescription>Number of errors that have occurred during the processing of a request.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Errors Total Per Sec" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Errors Total/Sec">
        <MetricTypeDescription>Rate of errors occurred.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Errors Unhandled During Execution" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Errors Unhandled During Execution">
        <MetricTypeDescription>Number of errors not handled by user code, but by the default error handler.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Errors Unhandled During Execution Per Sec" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Errors Unhandled During Execution/Sec">
        <MetricTypeDescription>Rate of unhandled errors.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Output Cache Entries" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Output Cache Entries">
        <MetricTypeDescription>Current number of entries in the output cache.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Output Cache Hit Ratio" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Output Cache Hit Ratio">
        <MetricTypeDescription>Ratio of hits to requests for output cacheable requests.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Output Cache Turnover Rate" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Output Cache Turnover Rate">
        <MetricTypeDescription>Number of additions and removals to the output cache per second.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Requests Executing" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Requests Executing">
        <MetricTypeDescription>The number of requests currently executing.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Requests In Application Queue" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Requests In Application Queue">
        <MetricTypeDescription>The number of requests in the application request queue.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Requests Timed Out" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Requests Timed Out">
        <MetricTypeDescription>The number of requests that timed out.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Requests Per sec" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Requests/sec">
        <MetricTypeDescription>The number of requests executed per second.</MetricTypeDescription>
      </MetricType>
    </EntityType>
  </EntityType>
  <EntityType EntityTypeDisplayName="Process" EntityTypeID="Process" MultipleInstance="true">
    <EntityType EntityTypeDisplayName="Process Instance" EntityTypeID="Process Instance" MultipleInstance="true">
      <MetricType MetricTypeID="Working Set" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Working Set">
        <MetricTypeDescription>Working Set is the current size, in bytes, of the Working Set of this process. The Working Set is the set of memory pages touched recently by the threads in the process. If free memory in the computer is above a threshold, pages are left in the Working Set of a process even if they are not in use.  When free memory falls below a threshold, pages are trimmed from Working Sets. If they are needed they will then be soft-faulted back into the Working Set before leaving main memory.</MetricTypeDescription>
      </MetricType>
    </EntityType>
  </EntityType>
  <EntityType EntityTypeDisplayName="Thread" EntityTypeID="Thread" MultipleInstance="true">
    <EntityType EntityTypeDisplayName="Thread Instance" EntityTypeID="Thread Instance" MultipleInstance="true">
      <MetricType MetricTypeID="Percent Processor Time" DataType="Value" DataUnit="Units" MetricTypeDisplayName="% Processor Time">
        <MetricTypeDescription>% Processor Time is the percentage of elapsed time that all of process threads used the processor to execution instructions. An instruction is the basic unit of execution in a computer, a thread is the object that executes instructions, and a process is the object created when a program is run. Code executed to handle some hardware interrupts and trap conditions are included in this count.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Context Switches Per sec" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Context Switches/sec">
        <MetricTypeDescription>Context Switches/sec is the rate of switches from one thread to another.  Thread switches can occur either inside of a single process or across processes.  A thread switch can be caused either by one thread asking another for information, or by a thread being preempted by another, higher priority thread becoming ready to run.  Unlike some early operating systems, Windows NT uses process boundaries for subsystem protection in addition to the traditional protection of user and privileged modes.  These subsystem processes provide additional protection.  Therefore, some work done by Windows NT on behalf of an application  appear in other subsystem processes in addition to the privileged time in the application.  Switching to the subsystem process causes one Context Switch in the application thread.  Switching back causes another Context Switch in the subsystem thread.</MetricTypeDescription>
      </MetricType>
      <MetricType MetricTypeID="Thread State" DataType="Value" DataUnit="Units" MetricTypeDisplayName="Thread State">
        <MetricTypeDescription>Thread State is the current state of the thread.  It is 0 for Initialized, 1 for Ready, 2 for Running, 3 for Standby, 4 for Terminated, 5 for Wait, 6 for Transition, 7 for Unknown.  A Running thread is using a processor; a Standby thread is about to use one.  A Ready thread wants to use a processor, but is waiting for a processor because none are free.  A thread in Transition is waiting for a resource in order to execute, such as waiting for its execution stack to be paged in from disk.  A Waiting thread has no use for the processor because it is waiting for a peripheral operation to complete or a resource to become free.</MetricTypeDescription>
      </MetricType>
    </EntityType>
  </EntityType>
  <EntityType EntityTypeDisplayName="Web Service" EntityTypeID="Web Service" MultipleInstance="true">
    <EntityType EntityTypeDisplayName="Web Service Instance" EntityTypeID="Web Service Instance" MultipleInstance="true">
      <MetricType MetricTypeID="ISAPI Extension Requests Per sec" DataType="Value" DataUnit="Units" MetricTypeDisplayName="ISAPI Extension Requests/sec">
        <MetricTypeDescription>The rate that ISAPI Extension requests are received by the Web service.</MetricTypeDescription>
      </MetricType>
    </EntityType>
  </EntityType>
</DataAdapter>